/*
 * This file is generated by jOOQ.
 */
package com.danielkarpov.todo.model.Dao.tables.records;


import com.danielkarpov.todo.model.Dao.tables.Task;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends TableRecordImpl<TaskRecord> implements Record2<String, Boolean> {

    private static final long serialVersionUID = -1423606780;

    /**
     * Setter for <code>public.Task.name</code>.
     */
    public TaskRecord setName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.Task.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.Task.status</code>.
     */
    public TaskRecord setStatus(Boolean value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.Task.status</code>.
     */
    public Boolean getStatus() {
        return (Boolean) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Boolean> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Task.TASK.NAME;
    }

    @Override
    public Field<Boolean> field2() {
        return Task.TASK.STATUS;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public Boolean component2() {
        return getStatus();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public Boolean value2() {
        return getStatus();
    }

    @Override
    public TaskRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public TaskRecord value2(Boolean value) {
        setStatus(value);
        return this;
    }

    @Override
    public TaskRecord values(String value1, Boolean value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(String name, Boolean status) {
        super(Task.TASK);

        set(0, name);
        set(1, status);
    }
}
